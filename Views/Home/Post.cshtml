@model NewsPortal.Services.EnrichedPostDto
@{
    ViewData["Title"] = Model.Title;
}
<div class="container mt-4">
    <div class="card fun-card p-4">
        <h2 class="fun-title">@Model.Title</h2>
        <p class="text-muted">por <b>@Model.Author?.name</b> <span class="badge bg-info text-dark ms-2">@Model.Author?.email</span></p>
        <p class="fs-5">@Model.Body</p>
        <div class="d-flex align-items-center mb-3">
            <span class="fun-badge me-2">@Model.Comments.Count comentarios üí¨</span>
        </div>
        <hr />
        <h4 class="mb-3">Comentarios</h4>
        <div>
            @foreach (var comment in Model.Comments)
            {
                <div class="fun-comment">
                    <strong>@comment.name</strong> <span class="text-muted small">(@comment.email)</span>
                    <div>@comment.body</div>
                </div>
            }
        </div>
        <div class="mb-3 mt-4">
            <form id="feedbackForm">
                <input type="hidden" name="postId" value="@Model.Id" />
                <button type="button" class="btn btn-success fun-btn me-2" id="likeBtn" onclick="sendFeedback('like')">üëç Me gust√≥</button>
                <button type="button" class="btn btn-danger fun-btn" id="dislikeBtn" onclick="sendFeedback('dislike')">üëé No me gust√≥</button>
            </form>
            <div id="feedbackMsg" class="mt-2"></div>
        </div>
    </div>
</div>
@section Scripts {
<script>
    let feedbackSent = false;
    function sendFeedback(sentimiento) {
        if (feedbackSent) return;
        var postId = @Model.Id;
        fetch('/api/feedback', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId: postId, sentimiento: sentimiento })
        })
        .then(async r => {
            if (r.ok) {
                document.getElementById('feedbackMsg').innerHTML = '<span class="text-success">¬°Gracias por tu feedback! üéâ</span>';
            } else {
                let msg = 'Error desconocido';
                let text = '';
                try {
                    // Intenta leer como texto primero
                    text = await r.text();
                    // Intenta parsear como JSON si no es HTML
                    if (text.trim().startsWith('{')) {
                        const data = JSON.parse(text);
                        msg = data.message || JSON.stringify(data);
                    } else if (text.trim().startsWith('<')) {
                        msg = 'Error del servidor o ruta no encontrada.';
                    } else {
                        msg = text;
                    }
                } catch {
                    msg = text || 'Error inesperado.';
                }
                document.getElementById('feedbackMsg').innerHTML = '<span class="text-danger">' + msg + '</span>';
            }
            document.getElementById('likeBtn').disabled = true;
            document.getElementById('dislikeBtn').disabled = true;
            feedbackSent = true;
        })
        .catch(err => {
            document.getElementById('feedbackMsg').innerHTML = '<span class="text-danger">' + (err.message || 'Error de red o servidor.') + '</span>';
            document.getElementById('likeBtn').disabled = true;
            document.getElementById('dislikeBtn').disabled = true;
            feedbackSent = true;
        });
    }
</script>
}
